{
    "name": "rcaron",
    "scopeName": "source.rcaron",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#languageConstant"
        },
        {
            "include": "#number"
        },
        {
            "include": "#controlKeyword"
        },
        {
            "include": "#variable"
        },
        {
            "include": "#string"
        },
        {
            "include": "#functionDeclaration"
        },
        {
            "include": "#classDeclaration"
        },
        {
            "include": "#builtInConversionFunctions"
        },
        {
            "include": "#builtInFunctions"
        },
        {
            "include": "#externThing"
        },
        {
            "include": "#methodCall"
        }
    ],
    "repository": {
        "languageConstant": {
            "match": "\\$(null|true|false)",
            "name": "constant.language.rcaron"
        },
        "comments": {
            "patterns": [
                {
                    "begin": "/#",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.rcaron"
                        }
                    },
                    "end": "#/",
                    "name": "comment.block.rcaron"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.rcaron"
                        }
                    },
                    "match": "(//).*$\\n?",
                    "name": "comment.line.double-slash.rcaron"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.rcaron"
                        }
                    },
                    "match": "(#!).*$\\n?",
                    "name": "comment.line.rcaron meta.shebang.rcaron"
                }
            ]
        },
        "number": {
            "patterns": [
                {
                    "match": "(0x)([0-9a-fA-F]+)([uUiIlLfFdDmM]{1,2})?",
                    "captures": {
                        "0": { "name": "definition.string.quoted.double.untitled" },
                        "1": { "name": "constant.numeric.hex.rcaron"},
                        "2": { "name": "constant.numeric.other.suffix.rcaron"}
                    },
                    "name": "constant.numeric"
                },
                {
                    "match": "([0-9]+)(\\.[0-9]+)?([uUiIlLfFdDmM]{1,2})?",
                    "captures": {
                        "2": { "name": "constant.numeric.other.suffix.rcaron" }
                    },
                    "name": "constant.numeric"
                }
            ]
        },
        "controlKeyword": {
            "match": "(?i)((dowhile)|(loop)|(while)|(return)|(foreach)|(qfor)|(for)|(else)|(if)|(switch)|(default)|(try)|(catch)|(finally)|(throw))",
            "name": "keyword.control"
        },
        "variable": {
            "match": "(\\$)([0-9a-z_A-Z]+)",
            "name": "variable",
            "captures": {
                "1": {
                    "name": "punctuation.definition.variable.rcaron"
                },
                "2": {
                    "name": "variable.other.readwrite.rcaron"
                }
            }
        },
        "string": {
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.rcaron"
                }
            },
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.rcaron"
                }
            },
            "name": "string.quoted.single",
            "patterns": [
                {
                    "include": "#singleQuotedStringContent"
                }
            ]
        },
        "functionDeclaration": {
            "comment": "Function declaration",
            "match": "(?i)(func)\\s+(\\w+)(?=\\()",
            "captures": {
                "1": {
                    "name": "keyword.function.rcaron"
                },
                "2": {
                    "patterns": [
                        {
                            "match": "\\d\\w*",
                            "name": "invalid.illegal.identifier.rcaron"
                        },
                        {
                            "match": "\\w+",
                            "name": "entity.name.function.rcaron"
                        }
                    ]
                }
            }
        },
        "classDeclaration": {
            "comment": "Class declaration",
            "match": "(?i)(class)\\s+(\\w+)",
            "captures": {
                "1": {
                    "name": "keyword.class.rcaron"
                },
                "2": {
                    "name": "entity.name.class.rcaron"
                }
            }
        },
        "builtInConversionFunctions": {
            "comment": "Built-in type conversion functions",
            "match": "(?i)(float|string|int32|int64)",
            "name": "support.function.builtin.rcaron"
        },
        "builtInFunctions": {
            "comment": "Built-in functions",
            "match": "(?i)(println|print|open_ext|open)",
            "name": "support.function.builtin.rcaron"
        },
        "externThing": {
            "match": "(#)([\\w\\._]+)",
            "captures": {
                "1": {
                    "name": "punctuation.definition.annotation.rcaron"
                },
                "2": {
                    "name": "entity.name.type.rcaron"
                }
            }
        },
        "singleQuotedStringContent": {
            "patterns": [
                {
                    "match": "\\\\(?:['\\\\0abfnrtv])",
                    "name": "constant.character.escape"
                },
                {
                    "comment": "utf 16 escapes",
                    "match": "\\\\u([0-9a-fA-F]{4})",
                    "name": "constant.character.escape"
                },
                {
                    "comment": "utf 32 escapes",
                    "match": "\\\\U([0-9a-fA-F]{8})",
                    "name": "constant.character.escape"
                },
                {
                    "match": "\\\\.",
                    "name": "invalid.illegal"
                }
            ]
        },
        "methodCall": {
            "match": "(?i)(\\w+)\\s*\\(",
            "captures": {
                "1": { "name": "support.function.rcaron" }
            }
        }
    }
}
